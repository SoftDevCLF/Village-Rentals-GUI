@page "/addrental"
@using VillageRentalsGUI.Data
@inject NavigationManager Navigation

<h1>Add New Rental</h1>
<hr />
<div class="container">
    <div class="row">
        <!-- Form Section -->
		<div class="col col-md-6">
            Enter new equipment details:
            <p class="text-danger">* <i class="text-dark">Required</i></p>

            <!-- Search customer by ID or name -->

			<form @onsubmit="SubmitRentalForm" @onsubmit:preventDefault="true"> <!--Prevent form from submitting via default browser behavior-->
				
	            @*Drop downs for Category and Equipment*@

	            @*NEED TO ADD LISTS IN EACH OF THE OPTION - should we do a class?*@
				
	            <!-- CUSTOMER Dropdown -->
	            <div class="form-group row mb-3">
		            <label class="col-sm-4 col-form-label me-3" for="Customer">Customer<i class="text-danger">*</i></label>
		            <div class="col-sm-7">
			            <select class="form-select ms-5" 
			                    @bind="selectedCustomerId"
			                    @bind:after="() => UpdateSelectedCustomer()"> <!-- onchange to set selectedCustomer -->
				            <option value="0">-- Select Customer --</option>
				            @foreach (Customer c in Customer.AllCustomers.Where(c => !c.IsBanned))
				            {
					            <option value="@c.CustomerID">@c.CustomerID - @c.FirstName @c.LastName</option>
				            }
			            </select>
		            </div>
	            </div>
				
	            <!-- CATEGORY Dropdown -->
	            <div class="form-group row mb-3">
		            <label class="col-sm-4 col-form-label me-3" for="Category">Category<i class="text-danger">*</i></label>
		            <div class="col-sm-7">
			            <select class="form-select ms-5"
			                    value="@selectedCategoryId"
			                    @onchange="OnCategoryChangedManual">
				            <option value="0">-- Select Category --</option>
				            @foreach (var category in Category.categoryList)
				            {
					            <option value="@category.CategoryId">@category.CategoryId - @category.CategoryName</option>
				            }
			            </select>
		            </div>
	            </div>

	            <!-- EQUIPMENT Dropdown (Filtered by Category) -->
	            <div class="form-group row mb-3">
		            <label class="col-sm-4 col-form-label me-3" for="Equipment">Equipment<i class="text-danger">*</i></label>
		            <div class="col-sm-7">
			            <select class="form-select ms-5"
			                    @onchange="OnEquipmentChanged"
			                    disabled="@(!filteredEquipmentList.Any())">
				            <option value="0">-- Select Equipment --</option>
				            @foreach (Equipment e in filteredEquipmentList)
				            {
					            <option value="@e.EquipmentID">@e.EquipmentID - @e.EquipmentName</option>
				            }
			            </select>
			            <small class="form-text text-muted ms-5">Select Category first</small>

		            </div>

	            </div>


	            @* RENTAL AND RETURN DATE - Input Section for the Form*@

	            <div class="form-group row mb-3">
                    <label class="col-sm-4 col-form-label me-3">Rental Start Date<i class="text-danger">*</i></label>
                    <div class="col-sm-7">
	                    <input class="form-control ms-5"
	                           type="date"
	                           value="@newRental.RentalDate.ToString("yyyy-MM-dd")"
	                           @onchange="OnStartDateChanged" />
						<small class="form-text text-muted ms-5">Date format is MM/DD/YYYY</small>

	                </div>
                </div>

                <div class="form-group row mb-3">
                    <label class="col-sm-4 col-form-label me-3">Return Date<i class="text-danger">*</i></label>
                    <div class="col-sm-7">
	                    <input class="form-control ms-5"
	                           type="date"
	                           value="@newRental.ReturnDate.ToString("yyyy-MM-dd")"
	                           @onchange="OnReturnDateChanged" />
						<small class="form-text text-muted ms-3">Date format is MM/DD/YYYY</small>

	                    </div>
                </div>
				
				
                @*COST HERE FOR THE RENTAL*@
	            <div class="form-group row mb-3">
                    @*This part needs to be an estimate calculated based on the entries.*@
		            <label class="col-sm-4 col-form-label me-3">Cost<i class="text-danger">*</i></label>
		            <div class="col-sm-7">
			            <input type="tel" class="form-control ms-5" placeholder="Estimated cost here" value="@newRental.TotalCost.ToString("C")" aria-label="Disabled input example" disabled readonly /> @* Disabled Input*@
			            <small id="emailHelp" class="form-text text-muted ms-5">Total cost will update when you input date</small>
			            <small class="form-text text-muted ms-5">
				            @(selectedCustomer != null && selectedCustomer.Discount > 0
					            ? $"Customer discount: {selectedCustomer.Discount}% applied"
					            : "No discount applied.")
			            </small>
		            </div>
	            </div>

                @* <div> *@
                @*     <button class="btn btn-primary mb-3 me-3" type="submit">Add Equipment</button> *@
	            @* </div> *@
				
								
	            <!-- Conditional button block -->
	            <div class="text-start mb-2">
		            @if (!isSubmitted)
		            {
			            <!-- Button to submit the form -->
			            <button class="btn btn-primary mb-3 me-3" type="submit">Add New Category</button>
		            }
		            else
		            {
			            <!-- Buttons to reset or go back after submission -->
			            <button class="btn btn-success me-2" @onclick="ResetForm">Add Another Rental</button>
						<button class="btn btn-secondary" @onclick="GoToRentalsPage">Go Back to Rentals</button>
		            }


	            </div>

            </form>
            <p class="@formStatusClass">@formStatus</p>

        </div>

        <!-- SIDEBAR - RENTAL SUCCESS -->
        <div class="col col-md-3 ms-5">
	        @if (successRentalId > 0)
	        {
		        <table class="table">
			        <thead>
			        <tr>
				        <th class="p-3 bg-success bg-opacity-50 rounded-1 text-white fs-5">
					        Rental Added!
				        </th>
			        </tr>
			        </thead>
			        <tbody>
			        <tr>
				        <td class="border rounded-3 py-2 px-3">
					        <strong>Rental ID:</strong> @successRentalId
				        </td>
			        </tr>
			        <tr>
				        <td class="border rounded-3 py-2 px-3">
					        <strong>Customer:</strong> @newRental.CustomerFirstName @newRental.CustomerLastName
				        </td>
			        </tr>
			        <tr>
				        <td class="border rounded-3 py-2 px-3">
					        <strong>Equipment:</strong> @newRental.EquipmentName
				        </td>
			        </tr>
			        <tr>
				        <td class="border rounded-3 py-2 px-3">
					        <strong>Start Date:</strong> @newRental.RentalDate.ToString("MM/dd/yyyy")
				        </td>
			        </tr>
			        <tr>
				        <td class="border rounded-3 py-2 px-3">
					        <strong>Return Date:</strong> @newRental.ReturnDate.ToString("MM/dd/yyyy")
				        </td>
			        </tr>
			        <tr>
				        <td class="border rounded-3 py-2 px-3">
					        @* <strong>Days:</strong> @(newRental.ReturnDate - newRental.RentalDate).Days *@
					        <strong>Days:</strong> @($"{(newRental.ReturnDate - newRental.RentalDate).Days} days")

				        </td>
			        </tr>
			        <tr>
				        <td class="border rounded-3 py-2 px-3">
					        <strong>Daily Rate:</strong> @selectedEquipment?.DailyRentalCost.ToString("C")
				        </td>
			        </tr>
			        <tr>
				        <td class="border rounded-3 py-2 px-3">
					        <strong>Discount:</strong> @(selectedCustomer?.Discount ?? 0)% 
				        </td>
			        </tr>
			        <tr>
				        <td class="border rounded-3 py-2 px-3">
					        <strong>Total Cost:</strong> @newRental.TotalCost.ToString("C")
				        </td>
			        </tr>
			        </tbody>
		        </table>
	        }
        </div>



    </div>

</div>



@code {

	private Rental newRental = new Rental();
	private List<Rental> rentals => Rental.rentalsList; // Static property for the rentalsList


	// Dropdown list data
	public List<Customer> customers = new();
	public List<Equipment> equipmentList = new();
	public List<Category> categories = new();

	// Selected dropdown values
	private int selectedCustomerId;
	private Customer selectedCustomer;
	
	private int selectedEquipmentId;
	private Equipment selectedEquipment;

	private int selectedCategoryId; // CATEGORY dropdown binding
	private List<Equipment> filteredEquipmentList = new(); // LIST that changes based on selected category

	// State tracking
	public int successRentalId = 0;
	public string formStatus = "";
	public string formStatusClass = "text-danger";
	public bool isSubmitted = false;


	// Initialization - Populate lists from static sources
	protected override void OnInitialized()
	{
		customers = Customer.AllCustomers.Where(c => !c.IsBanned).ToList(); // Do not add Customers with BANNED status
		equipmentList = Equipment.AllEquipment;
		categories = Category.categoryList;
		filteredEquipmentList = new List<Equipment>();

		Equipment.Initialize(); // INITIALIZE FOR EQUIPMENT; To get CategoryID.

		newRental.RentalDate = DateTime.Today;
		newRental.ReturnDate = DateTime.Today.AddDays(1);
	}

	// Event Helper - helper method for when Customer dropdown changes
	private void UpdateSelectedCustomer()
	{
		selectedCustomer = customers.FirstOrDefault(c => c.CustomerID == selectedCustomerId);
	}

	private void OnCategoryChangedManual(ChangeEventArgs e)
	{
		if (int.TryParse(e.Value?.ToString(), out int id))
		{
			selectedCategoryId = id;
			OnCategoryChanged();
		}
	}


	// Event Helper - On Category Change Event Change Args - When Category is picked, Equipment is filtered automatically.
	private void OnCategoryChanged()
	{
		// Safety check: prevent filtering on 0 or invalid values
		if (selectedCategoryId <= 0)
		{
			filteredEquipmentList.Clear();
			selectedEquipmentId = 0;
			selectedEquipment = null;
			return;
		}

		// Filter equipment that belongs to selected category
		filteredEquipmentList = Equipment.AllEquipment
			.Where(eq => eq.CategoryId == selectedCategoryId)
			.ToList();

		// Reset selection if category changed
		selectedEquipmentId = 0;
		selectedEquipment = null;
	}

	// Event Helper - Equipment Change
	private void OnEquipmentChanged(ChangeEventArgs e)
	{
		if (int.TryParse(e.Value?.ToString(), out int newId))
		{
			selectedEquipmentId = newId;
			selectedEquipment = filteredEquipmentList.FirstOrDefault(eq => eq.EquipmentID == newId);
			RecalculateCost();
		}
	}


	// Event Helper - Ensures selectedEquipment is set from dropdown and updates cost
	private void UpdateSelectedEquipment()
	{
		selectedEquipment = filteredEquipmentList.FirstOrDefault(eq => eq.EquipmentID == selectedEquipmentId);
		RecalculateCost();
	}


	// Event Helper - Start Date and End Date Change TO RECALCULATE COST AGAIN
	private void OnStartDateChanged(ChangeEventArgs e)
	{
		if (DateTime.TryParse(e.Value?.ToString(), out var parsed))
		{
			newRental.RentalDate = parsed;
			RecalculateCost();
		}
	}

	private void OnReturnDateChanged(ChangeEventArgs e)
	{
		if (DateTime.TryParse(e.Value?.ToString(), out var parsed))
		{
			newRental.ReturnDate = parsed;
			RecalculateCost();
		}
	}


	// Live Calculation on Input Change
	private void RecalculateCost()
	{
		if (selectedEquipment != null &&
		    selectedCustomer != null &&
		    newRental.RentalDate != default &&
		    newRental.ReturnDate > newRental.RentalDate)
		{
			int days = (newRental.ReturnDate - newRental.RentalDate).Days;
			double baseCost = days * selectedEquipment.DailyRentalCost;
			double discountAmount = baseCost * (selectedCustomer.Discount / 100.0);
			newRental.TotalCost = baseCost - discountAmount;
		}
		else
		{
			newRental.TotalCost = 0;
		}
	}

	// SUBRENTALFORM - Form submit handler
	public void SubmitRentalForm()
	{
		// Check required fields
		if (selectedCustomer == null || selectedEquipment == null ||
		    newRental.RentalDate == default || newRental.ReturnDate == default ||
		    newRental.ReturnDate <= newRental.RentalDate)
		{
			formStatus = "Please fill out all fields correctly.";
			formStatusClass = "text-danger";
			isSubmitted = false;
			return;
		}

		selectedCustomer = Customer.AllCustomers.FirstOrDefault(c => c.CustomerID == selectedCustomerId);
		selectedEquipment = Equipment.AllEquipment.FirstOrDefault(e => e.EquipmentID == selectedEquipmentId);


		// Assign selected customer/equipment details to rental
		newRental.CustomerId = selectedCustomer.CustomerID;
		newRental.CustomerFirstName = selectedCustomer.FirstName;
		newRental.CustomerLastName = selectedCustomer.LastName;
		newRental.EquipmentName = selectedEquipment.EquipmentName;

		// Calculate estimated cost
		int days = (newRental.ReturnDate - newRental.RentalDate).Days;
		newRental.TotalCost = days * selectedEquipment.DailyRentalCost;


		RecalculateCost();
		AddRental();
		isSubmitted = true;
	}

	// ADD RENTAL FUNCTION - Add rental logic
	public void AddRental()
	{
		// Prevent accidental duplicate rental IDs by checking if it already exists:
		if (rentals.Any(r => r.RentalID == newRental.RentalID))
		{
			formStatus = "Rental already exists.";
			formStatusClass = "text-danger";
			return;
		}



		// Rental ID
		int newId = 1000;

		if (rentals.Count > 0)
		{
			int maxId = 0;
			foreach (var rental in rentals)
			{
				if (rental.RentalID > maxId)
				{
					maxId = rental.RentalID;
				}
			}

			newId = maxId + 1;
		}

		newRental.RentalID = newId;
		newRental.DateCreated = DateTime.Now;
		newRental.CustomerId = selectedCustomer.CustomerID;
		newRental.CustomerFirstName = selectedCustomer.FirstName;
		newRental.CustomerLastName = selectedCustomer.LastName;
		newRental.EquipmentName = selectedEquipment.EquipmentName;

		// Calculating Daily Rate and Total Cost
		int days = (newRental.ReturnDate - newRental.RentalDate).Days;
		newRental.TotalCost = days * selectedEquipment.DailyRentalCost;

		rentals.Add(newRental);

		// Save to JSON
		DataLoader.SaveAll();

		successRentalId = newId;
		formStatus = "Rental added successfully!";
		formStatusClass = "text-success";

		StateHasChanged();
	}

	// Resets form for new entry
	public void ResetForm()
	{
		newRental = new Rental();
		selectedCustomerId = 0;
		selectedCustomer = null;

		selectedEquipmentId = 0;
		selectedEquipment = null;

		selectedCategoryId = 0;
		filteredEquipmentList.Clear();

		isSubmitted = false;
		formStatus = "";
		formStatusClass = "text-danger";
		successRentalId = 0;

		newRental.RentalDate = DateTime.Today;
		newRental.ReturnDate = DateTime.Today.AddDays(1);


		StateHasChanged(); // To force UI refresh
	}



    // Navigation Methods
	private void GoToRentalsPage()
	{
		Navigation.NavigateTo("/rentalsgui");
	}

	private void GoToAddRentalPage()
	{
		Navigation.NavigateTo("/addrental");
	}


}
